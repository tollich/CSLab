from base64 import b64encode, b64decode
import os

from pymongo import MongoClient
from pymongo.encryption import ClientEncryption
from bson import binary
from bson.codec_options import CodecOptions

codec_opts = CodecOptions(uuid_representation=binary.STANDARD)

# Test key material generated by: echo $(head -c 96 /dev/urandom | base64 | tr -d '\n')
if "LOCAL_MASTER_KEY" not in os.environ:
    raise Exception("Set LOCAL_MASTER_KEY env variable to 96 bytes of base64")

master_key = binary.Binary(b64decode(os.environ["LOCAL_MASTER_KEY"]))

# Reset the collection
key_vault_client = MongoClient("mongodb://localhost/")
key_vault_client.lab7.key_vault.drop()

# Configure a ClientEncryption object to create data keys
kms_providers = {"local": {"key": master_key}}
key_vault_client = MongoClient()
client_encryption = ClientEncryption(
    kms_providers, "lab7.key_vault", key_vault_client, codec_opts)

key_uuid = client_encryption.create_data_key("local")

# Store the key id into a file for easy access
open("key_uuid.txt", "w").write(b64encode(key_uuid).decode("utf-8"))
print("Created key in lab7.key_vault with UUID: %s" % key_uuid.hex())
